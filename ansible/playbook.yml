---
- hosts: aws
  become: true
  become_user: root
  vars:
    container_count: 1
    app_container_name: webapp
    app_container_image: training/webapp
  tasks:
    - name: Wait 300 seconds for server to boot up
      wait_for_connection:
        delay: 1
        timeout: 300

    - name: Update apt repo and cache on all Debian/Ubuntu boxes
      apt: update_cache=yes force_apt_get=yes cache_valid_time=3600

    - name: Upgrade all packages on servers
      apt: upgrade=dist force_apt_get=yes

    - name: Install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - tree
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
          - nginx
        state: latest
        update_cache: true

    - name: Check If Docker Is Installed
      command: docker --version
      register: docker_valid
      ignore_errors: yes

    - name: Install Docker if not present
      when: docker_valid.failed
      block:
        - name: Add Docker GPG apt Key
          apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present

        - name: Add Docker Repository
          apt_repository:
            repo: deb https://download.docker.com/linux/ubuntu focal stable
            state: present

        - name: Update apt and install docker-ce
          apt:
            name: docker-ce
            state: latest
            update_cache: true

        - name: Install Docker Module for Python
          pip:
            name: docker

        - name: Adding 'docker' user
          user:
            name: docker
            comment: docker access only
            group: docker
            createhome: yes
            home: /home/docker

        - name: Adding shared folder for application
          file:
            path: /docker/shared
            state: directory
            recurse: yes
            owner: docker
            group: docker

    - name: Check if a reboot is needed on all servers
      register: reboot_required_file
      stat: path=/var/run/reboot-required get_md5=no

    - name: Reboot the box if kernel updated
      reboot:
        msg: "Reboot initiated by Ansible for kernel updates"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when: reboot_required_file.stat.exists

    - name: Retrieve service facts
      service_facts:

    - name: Configure aws_monitor service
      when: ansible_facts.services["aws-monitor.service"] is not defined
      block:
        - name: Create .aws folder for credentials
          file:
            path: ~/.aws
            state: directory
            recurse: yes

        - name: Copy credential for monitor service
          copy:
            src: ".tmp/credentials"
            dest: ~/.aws

        - name: Copy aws-monitor library to host machine
          copy:
            src: ".tmp/aws_monitor-1.0.0-py3-none-any.whl"
            dest: /tmp
      
        - name: Insatll aws-monitor
          pip:
            name: aws-monitor
            extra_args: "--find-links=/tmp"

        - name: Create aws-monitor service log folder
          file: 
            path: /var/log/aws-monitor
            state: directory
            recurse: yes

        - name: Copy aws-monitor service file to host
          copy:
            src: .tmp/aws-monitor.service
            dest: /etc/systemd/system/

        - name: Enable aws-monitor service
          service:
            name: aws-monitor.service
            enabled: yes

        - name: Start aws-monitor service
          service:
            name: aws-monitor.service
            state: started

    - name: Remove existing container
      docker_container:
        name: "{{ app_container_name }}{{ item }}"
        state: absent
      with_sequence: count={{ container_count }} 

    - name: Remove existing docker image
      docker_image:
        name: "{{ app_container_image }}"
        state: absent

    - name: Copying nginx conf
      copy:
        src: ".tmp/{{ lookup('dig', ansible_host) }}.conf"
        dest: /etc/nginx/sites-enabled/default
      notify:
        - restart nginx

    - name: Pull app docker image
      docker_image:
        name: "{{ app_container_image }}"
        source: pull
      notify:
        - start containers
        - restart nginx

  handlers:
    - name: restart nginx
      service: 
        name: nginx
        state: restarted
    
    - name: start containers
      docker_container:
        name: "{{ app_container_name }}{{ item }}"
        image: "{{ app_container_image }}"
        state: started
        restart_policy: always
        ports:
          - 500{{ item }}:5000
        volumes:
          - /docker/shared:/docker/shared
      with_sequence: count={{ container_count }} 